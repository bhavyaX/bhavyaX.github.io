{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","CardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAiBeA,EAfF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAQC,EAAQ,EAARA,GAC1B,OACD,yBAAKC,UAAU,uDAEb,yBAAKC,IAAI,SAAQC,IAAG,+BAA0BH,EAA1B,cAEjB,6BACA,4BAAKF,GACF,2BAAIC,MCWCK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEZC,EAAgBD,EAAOE,IAAI,SAACC,EAAMC,GAEvC,OAAQ,kBAAC,EAAD,CAAMC,IAAMD,EAAGT,GAAMK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,UAIlF,OAAS,6BAEDO,ICOIK,EAjBG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAEhC,OAEE,yBAAKZ,UAAU,OACf,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCAI,EAXA,SAACC,GAEf,OAEC,yBAAKC,MAAO,CAAEC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAQ,UAC9DJ,EAAMK,WCmDFC,G,kBAlDZ,aAAe,IAAD,8BAET,+CAgBNC,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAjBrC,EAAKC,MAAQ,CAEZzB,OAAQ,GACRO,YAAa,IANL,E,iFAWO,IAAD,OACnBmB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEtB,OAAQ8B,Q,+BAWlC,IAAD,EACwBC,KAAKN,MAA5BzB,EADD,EACCA,OAAQO,EADT,EACSA,YACTyB,EAAehC,EAAOiC,OAAO,SAAAjC,GAClC,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS5B,EAAY2B,iBAExD,OAAQlC,EAAOoC,OAIhB,yBAAKxC,UAAU,MACf,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC5B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,OAAQgC,MARM,6C,GA/BXK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,gB","file":"static/js/main.5aa6c756.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email , id}) => {\r\n   return (\r\n  <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n   \r\n    <img alt='robots'src={`https://robohash.org/${id}?200*200`} />\r\n   \r\n       <div>   \r\n       <h2>{name}</h2>\r\n          <p>{email}</p>\r\n    </div>\r\n  </div>\r\n);\r\n  \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n   \r\n  const CardComponent = robots.map((user, i) => {\r\n\r\n  \treturn  <Card key= {i} id = {robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\r\n  })\r\n\r\n   return ( <div>\r\n          \r\n          {CardComponent}\r\n\r\n          </div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange }) => {\r\n\r\n\treturn (\r\n\r\n   <div className='pa2'>\r\n\t\t <input\r\n\t\t   className='pa3 ba b--green bg-lightest-blue'\r\n\t\t   type='search'\r\n\t\t   placeholder='search Robots'\r\n\t\t   onChange={searchChange}\r\n\t\t   />\r\n\t</div>\r\n\r\n  ); \r\n\t\t    \r\n} \r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div style={{ overflowY: 'scroll' , border: '2px solid black' ,height: '800px'}}>\r\n          {props.children}\r\n          </div>\r\n\t\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\nclass App extends Component {\n   constructor() {\n        \n        super()\n        this.state = {\n\n         robots: [],\n         searchfield: ''\n\n        }\n   }\n\n   componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {this.setState({ robots: users})});\n\n   }\n\n  onSearchChange = (event) => {\n\n    this.setState({searchfield: event.target.value })\n\n   }\n\n \n  render() {\n     const {robots, searchfield} = this.state;\n     const filterRobots = robots.filter(robots => {\n      return robots.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    return !robots.length ?  <h1> Loading </h1> :\n    \n    (\n\n   <div className='tc'>\n   <h1 className='f1'>Robo Friends</h1>\n   <SearchBox searchChange={this.onSearchChange} />\n     <Scroll>\n     <CardList robots={filterRobots}/>\n     </Scroll>\n\n     </div>\n        \n     );\n\n    \n  }\n\n }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import './App.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n// import {robots} from './Robots';\n\n\nReactDOM.render(<App />\t, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}